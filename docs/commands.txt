📘 COMMANDES DISPONIBLES – EXEMPLES PRATIQUES

📦 GIT LOCAL
-----------
init <repo> <true|false> <path>   → Initialise un nouveau repo local
  Exemple: flowkhfifdrif "init MyProject true ./mon-projet"

clone <URL>                       → Clone un repo distant
  Exemple: flowkhfifdrif "clone https://github.com/user/repo"

# Commandes add/commit/push
add                               → Ajoute tous les fichiers modifiés
  Exemple: flowkhfifdrif "add"

commit <message>                  → Commit avec message
  Exemple: flowkhfifdrif "commit Correction du bug d'authentification"
  Exemple: flowkhfifdrif "commit \"Fix login page bug\""

add-commit <message>              → Ajoute et commit en une commande
  Exemple: flowkhfifdrif "add-commit Ajout de la fonctionnalité de recherche"

push-main <message>               → Add, commit et push sur main
  Exemple: flowkhfifdrif "push-main Version initiale du projet"


# Branches
branch-feat-x                     → Crée une nouvelle branche
  Exemple: flowkhfifdrif "branch-feature-login"

checkout-feat-x                   → Bascule vers une branche
  Exemple: flowkhfifdrif "checkout-develop"

# Informations
status                            → Affiche l'état du dépôt
  Exemple: flowkhfifdrif "status"

log                               → Affiche le dernier commit
  Exemple: flowkhfifdrif "log"

commit-n                          → Affiche les n derniers commits
  Exemple: flowkhfifdrif "commit-5"
  Exemple: flowkhfifdrif "commit-10"

logs                              → Affiche le fichier history.log complet
  Exemple: flowkhfifdrif "logs"

pull-main                         → Récupère les dernières modifs de main
  Exemple: flowkhfifdrif "pull-main"

🔧 DÉPENDANCES ET NETTOYAGE
-------------------------
install-express                   → Installe express avec npm
  Exemple: flowkhfifdrif "install-express"

clean                             → Nettoie les logs et fichiers temporaires
  Exemple: flowkhfifdrif "clean"

☁️ GITHUB REMOTE
-------------
remote-MyApp                      → Crée un repo GitHub et le relie localement
  Exemple: flowkhfifdrif "remote-MyProject"

board-MyApp                       → Crée un tableau et des issues de base
  Exemple: flowkhfifdrif "board-MyProject"

issue-MyApp <titre>               → Crée une issue personnalisée
  Exemple: flowkhfifdrif "issue-MyProject Ajouter la page de connexion"

assign-john-MyApp-3               → Assigne une issue à un utilisateur
  Exemple: flowkhfifdrif "assign-john-MyProject-3"

🔄 MODES D'EXÉCUTION AVANCÉS (AVEC INTELLIGENCE IA)
--------------------------------------------------
# Mode Fork (-f): Parallélisation intelligente des traitements sans attente
  🧠 Intelligence IA: Détecte automatiquement quelles commandes peuvent être parallélisées
  ⚡ Optimisation NPM: Combine automatiquement plusieurs "install-<package>" en une seule commande npm
  🔐 Protection Git: Empêche la parallélisation des séquences Git qui causent des conflits de verrouillage
  
  Exemples d'optimisations automatiques:
  flowkhfifdrif -f "install-express && install-mongoose && install-dotenv"
  → Devient automatiquement: npm install express mongoose dotenv cors
  
  flowkhfifdrif -f "clone repo1 && clone repo2"
  → Vrais clones parallèles (opérations indépendantes)
  
  flowkhfifdrif -f "push-backup-main \"Deploy\""
  → Séquentiel intelligent (évite les conflits git)

# Mode Thread (-t): Parallélisation intelligente avec attente de complétion
  🧠 Même intelligence que le mode Fork mais avec synchronisation finale
  💾 Garantie de données: S'assure que toutes les opérations sont terminées
  🔄 Idéal pour: Opérations critiques nécessitant une confirmation de complétion
  
  Exemple: flowkhfifdrif -t "install-react && install-redux && install-axios"
  → Optimisé en: npm install react redux axios (avec attente de complétion)

# Mode Subshell (-s): Exécution dans un environnement isolé
  🏠 Isolation: Exécute dans un sous-shell sans affecter l'environnement principal
  🧪 Test: Parfait pour tester des commandes sans risque
  Exemple: flowkhfifdrif -s "install-react"
  Exemple: flowkhfifdrif -s "status"

🚀 COMMANDES ET OPTIMISATIONS INTELLIGENTES
------------------------------------------
# FlowKhfifDrif analyse automatiquement vos commandes et applique les optimisations suivantes:

# 🔧 Optimisation des installations NPM
install-<package> && install-<package>... → npm install package1 package2...
  Exemple automatique:
  Input:  "install-express && install-mongoose && install-dotenv && install-cors"
  Output: npm install express mongoose dotenv cors
  
  ✅ Avantages: Évite les conflits npm, 4x plus rapide, un seul package.json update

# 🔐 Protection des workflows Git séquentiels
add && commit && push                      → Exécution séquentielle forcée
push-backup-<branch>                       → Workflow sécurisé avec backup automatique
  
  Exemple de protection:
  Input:  flowkhfifdrif -f "add && commit 'msg' && push-main"
  Comportement: Force l'exécution séquentielle pour éviter les git locks
  
  ✅ Avantages: Aucun conflit git, backup automatique, intégrité des données

# 🚀 Vraie parallélisation pour opérations indépendantes
clone <repo1> && clone <repo2>             → Clones parallèles réels
  Exemple:
  Input:  "clone https://github.com/user/repo1 && clone https://github.com/user/repo2"
  Comportement: Deux processus git clone indépendants en parallèle
  
  ✅ Avantages: 2x plus rapide, aucune dépendance entre opérations

# 💾 Push avec backup automatique (Innovation FlowKhfifDrif)
push-backup-<branch> "message"            → Push sécurisé avec backup
  Workflow automatique:
  1. git add . && git commit -m "message"
  2. git checkout -b backup-<branch>-<timestamp>
  3. git checkout <branch>
  4. git push origin backup-<branch>-<timestamp>
  5. git push origin <branch>
  
  Exemple: flowkhfifdrif "push-backup-main \"Deploy v2.1\""
  Crée: backup-main-20250101-143022 + push sécurisé

🔄 COMMANDE DE RÉINITIALISATION
-----------------------------------------
# Reset (-r): Réinitialisation complète de l'environnement FlowKhfifDrif
  ⚠️ IMPORTANT: Cette commande DOIT être exécutée avec sudo
  Usage: sudo flowkhfifdrif -r
  
  Actions effectuées:
  • Suppression du dépôt local actuel
  • Réinitialisation de la configuration Git globale
  • Nettoyage complet des logs
  • Recréation des répertoires avec les bonnes permissions
  • Réinitialisation du fichier de configuration
  
  Exemple correct: sudo flowkhfifdrif -r
  Exemple incorrect: flowkhfifdrif -r  (affichera un avertissement)

ℹ️ UTILISATION
----------
flowkhfifdrif "votre commande ici"

REMARQUES:
- Les guillemets autour des messages sont optionnels
- Pour les messages contenant des caractères spéciaux, utilisez des guillemets
- Toutes les commandes utilisent la syntaxe avec tirets pour plus de cohérence
